from parcer_file_extension import parse_file


def generate_dict(path1, path2):
    # Получаем наши готовые словари для сравнения с помощью функции parse_file
    dict1 = parse_file(path1)
    dict2 = parse_file(path2)
    result = []
    # Проходим по нашему первому словарю (по его ключам)
    for i in dict1:
        # Если ключ из первого словаря есть во втором
        if i in dict2:
            # Если значение по ключу из первого словаря равно значению такого же ключа из второго словаря
            if dict1[i] == dict2[i]:
                # Добавляем этот ключ: значение в наш результат без всяких знаков (Тут необходимо реализовать
                # отдельное внутренне представление и отметить что этот ключ остался без изменений)
                result.append(f'  {i}: {dict1[i]}')
            # Если значение по ключу из первого словаря не равно значению такого же ключа из второго словаря
            if dict1[i] != dict2[i]:
                # Добавляем этот ключ: значение в наш результат со знаком минуса (Тут необходимо реализовать
                # отдельное внутренне представление и отметить что этот ключ был изменен (т.к. ключи
                # присутствуют в обоих словарях, а значения разные))
                result.append(f'- {i}: {dict1[i]}')
        # Если ключ из первого словаря отсутствует во втором
        if i not in dict2:
            # Добавляем этот ключ: значение в наш результат со знаком минуса (Тут необходимо реализовать
            # отдельное внутренне представление и отметить что этот ключ был удален (т.к. ключ
            # присутствует в первом словаре, но отсутствует во втором))
            result.append(f'- {i}: {dict1[i]}')
    # Проходим по нашему второму словарю (по его ключам)
    for i in dict2:
        # Если ключ из второго словаря отсутствует в первом
        if i not in dict1:
            # Добавляем этот ключ: значение в наш результат со знаком плюса (Тут необходимо реализовать
            # отдельное внутренне представление и отметить что этот ключ был добавлен (т.к. ключ
            # присутствует во втором словаре, но отсутствует в первом))
            result.append(f'+ {i}: {dict2[i]}')
        # Если ключ из второго словаря есть в первом
        if i in dict1:
            # Если значение по ключу из второго словаря не равно значению такого же ключа из первого словаря
            if dict2[i] != dict1[i]:
                # Добавляем этот ключ: значение в наш результат со знаком плюса (Тут необходимо реализовать
                # отдельное внутренне представление и отметить что этот ключ был изменен (т.к. ключ
                # присутствует во втором словаре, но отсутствует в первом))
                result.append(f'+ {i}: {dict2[i]}')

    # Получается что у нас есть два варианта изменения ключей если он изменен и имеет знак минус, тогда этот
    # ключ из первого словаря, если ключ изменен и имеет знак плюс тогда этот ключ из второго словаря

    # Попробовать формировать словарь который будет включать в себя ключи, а значением будут выступать
    # состояние этого ключа (добавлен, изменен, удален)

    sorted_result = sorted(result, key=lambda x: x[2])
    result_text = '\n'.join(sorted_result)
    return '{' + '\n' + result_text + '\n' + '}'

# p1 = '/Users/milcford/hexlet/python-project-50/gendiff/tests/fixtures/file1.json'
# p2 = '/Users/milcford/hexlet/python-project-50/gendiff/tests/fixtures/file2.json'
# print(generate_dict(p1, p2))
